name: Deploy Celery + Flower to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: latest

  # PostgreSQL
  POSTGRESQL_DATABASE_NAME: ${{ secrets.POSTGRESQL_DATABASE_NAME }}
  POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
  POSTGRESQL_SERVER_NAME: ${{ secrets.POSTGRESQL_SERVER_NAME }}
  POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
  PORT: 5432
  
  # OpenAI and Deepgram API Keys
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
  
  # AWS SES Config
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: 587
  EMAIL_USE_TLS: true
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
  
  # AWS S3 Config
  USE_S3: true
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  # Intuit Config
  INTUIT_VERIFIER_TOKEN: ${{ secrets.INTUIT_VERIFIER_TOKEN }}
  INTUIT_CLIENT_ID: ${{ secrets.INTUIT_CLIENT_ID }}
  INTUIT_CLIENT_SECRET: ${{ secrets.INTUIT_CLIENT_SECRET }}
  NEW_INTUIT_REDIRECT_URI: ${{ secrets.NEW_INTUIT_REDIRECT_URI }}
  INTUIT_ENVIRONMENT: ${{ secrets.INTUIT_ENVIRONMENT }}
  
  # Stripe Config
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
  
  # Redis URL
  REDIS_URL: ${{ secrets.REDIS_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Build Docker image
      #   run: |
      #     docker build -t practice-session .
      #     docker tag practice-session:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG

      # - name: Push Docker image to ECR
      #   run: |
      #     docker push $ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # - name: Export Terraform variables
      #   run: |
      #     for var in \
      #       AWS_REGION ECR_REPOSITORY IMAGE_TAG \
      #       POSTGRESQL_DATABASE_NAME POSTGRESQL_USERNAME POSTGRESQL_SERVER_NAME POSTGRESQL_PASSWORD PORT \
      #       OPENAI_API_KEY DEEPGRAM_API_KEY \
      #       EMAIL_HOST EMAIL_PORT EMAIL_USE_TLS EMAIL_HOST_USER EMAIL_HOST_PASSWORD DEFAULT_FROM_EMAIL \
      #       USE_S3 AWS_STORAGE_BUCKET_NAME AWS_S3_REGION_NAME AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY \
      #       INTUIT_VERIFIER_TOKEN INTUIT_CLIENT_ID INTUIT_CLIENT_SECRET NEW_INTUIT_REDIRECT_URI INTUIT_ENVIRONMENT \
      #       STRIPE_SECRET_KEY STRIPE_PUBLISHABLE_KEY STRIPE_WEBHOOK_SECRET \
      #       REDIS_URL
      #     do
      #       echo "Exporting TF_VAR_$var"
      #       echo "TF_VAR_$var=${!var}" >> $GITHUB_ENV
      #     done

      - name: Clean Terraform Cache
        working-directory: ./terraform
        run: |
          echo "Cleaning Terraform cache..."
          rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # - name: Terraform refresh
      #   working-directory: ./terraform
      #   run: terraform refresh 

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve