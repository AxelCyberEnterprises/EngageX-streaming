# Generated by Django 5.1.7 on 2025-05-03 14:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.storages_backends
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PracticeSequence',
            fields=[
                ('sequence_id',
                 models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sequence_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sequences',
                                   to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PracticeSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(max_length=100)),
                ('session_type', models.CharField(choices=[('pitch', 'Pitch Practice'), ('public', 'Public Speaking'),
                                                           ('presentation', 'Presentation')], max_length=20)),
                ('goals', models.JSONField(blank=True, default=list, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('duration', models.DurationField(blank=True, help_text='Duration of the session', null=True)),
                ('note', models.TextField(blank=True, help_text='Optional note (for users)', null=True)),
                ('slides_file',
                 models.FileField(blank=True, help_text='Upload presentation slides (e.g., PDF, PPT, image files).',
                                  null=True, storage=users.storages_backends.SlidesStorage(), upload_to='slides/',
                                  validators=[django.core.validators.FileExtensionValidator(
                                      allowed_extensions=['pdf', 'ppt', 'pptx', 'odp', 'key', 'jpg', 'jpeg', 'png',
                                                          'gif'])])),
                ('slide_specific_timing', models.JSONField(blank=True, default=dict, null=True)),
                ('allow_ai_questions',
                 models.BooleanField(default=False, help_text='Allow AI to ask random questions during the session')),
                ('virtual_environment', models.CharField(blank=True, choices=[('conference_room', 'Conference Room'),
                                                                              ('board_room_1', 'Board Room 1'),
                                                                              ('board_room_2', 'Board Room 2'),
                                                                              ('pitch_studio', 'pitch_studio')],
                                                         help_text='Select a virtual environment.', max_length=50,
                                                         null=True)),
                ('compiled_video_url',
                 models.URLField(blank=True, help_text='URL of the final compiled video for the session.',
                                 max_length=400, null=True)),
                ('volume', models.IntegerField(default=0, help_text='Average volume of the session')),
                ('pitch_variability',
                 models.IntegerField(default=0, help_text='Average pitch variability of the session')),
                ('pace', models.IntegerField(default=0, help_text='Average pace of the session')),
                ('pauses',
                 models.IntegerField(default=0, help_text='Average pause score for the session (expected over 100)')),
                ('conviction', models.IntegerField(default=0, help_text='Overall conviction score for the session',
                                                   validators=[django.core.validators.MinValueValidator(0),
                                                               django.core.validators.MaxValueValidator(100)])),
                ('clarity', models.IntegerField(default=0, help_text='Overall clarity score for the session',
                                                validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(100)])),
                ('impact', models.IntegerField(default=0, help_text='Overall impact score for the session',
                                               validators=[django.core.validators.MinValueValidator(0),
                                                           django.core.validators.MaxValueValidator(100)])),
                ('brevity', models.IntegerField(default=0, help_text='Overall brevity score for the session',
                                                validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(100)])),
                ('trigger_response',
                 models.IntegerField(default=0, help_text='Overall trigger response score for the session',
                                     validators=[django.core.validators.MinValueValidator(0),
                                                 django.core.validators.MaxValueValidator(100)])),
                ('filler_words', models.IntegerField(default=0, help_text='Overall filler words score for the session',
                                                     validators=[django.core.validators.MinValueValidator(0),
                                                                 django.core.validators.MaxValueValidator(100)])),
                ('grammar', models.IntegerField(default=0, help_text='Overall grammar score for the session',
                                                validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(100)])),
                ('posture', models.IntegerField(default=0, help_text='Overall posture score for the session',
                                                validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(100)])),
                ('motion', models.IntegerField(default=0, help_text='Overall motion score for the session',
                                               validators=[django.core.validators.MinValueValidator(0),
                                                           django.core.validators.MaxValueValidator(100)])),
                ('gestures',
                 models.BooleanField(default=False, help_text='Presence of positive gestures in the session')),
                ('gestures_score_for_body_language',
                 models.IntegerField(default=0, help_text='Score for gestures in body language analysis',
                                     validators=[django.core.validators.MinValueValidator(0),
                                                 django.core.validators.MaxValueValidator(100)])),
                ('transformative_potential',
                 models.IntegerField(default=0, help_text='Overall transformative potential score for the session',
                                     validators=[django.core.validators.MinValueValidator(0),
                                                 django.core.validators.MaxValueValidator(100)])),
                ('general_feedback_summary',
                 models.TextField(blank=True, help_text='General feedback summary for the session', null=True)),
                ('strength',
                 models.TextField(blank=True, help_text='Key strengths identified in the session', null=True)),
                ('area_of_improvement',
                 models.TextField(blank=True, help_text='Areas for improvement in the session', null=True)),
                ('audience_engagement',
                 models.FloatField(default=0, help_text='Average of impact, trigger response, and conviction')),
                ('overall_captured_impact',
                 models.FloatField(default=0, help_text='Overall captured impact (same as impact)')),
                ('vocal_variety', models.FloatField(default=0,
                                                    help_text='Average of volume, pitch, pace, and pauses (expected over 100)')),
                ('emotional_impact',
                 models.FloatField(default=0, help_text='Emotional impact (same as trigger response)')),
                ('body_language',
                 models.FloatField(default=0, help_text='Score derived from posture, motion, and gestures')),
                ('transformative_communication', models.FloatField(default=0,
                                                                   help_text='Transformative communication (same as transformative potential)')),
                ('structure_and_clarity',
                 models.FloatField(default=0, help_text='Overall score for structure and clarity')),
                ('language_and_word_choice',
                 models.FloatField(default=0, help_text='Average of brevity, filler words, and grammar')),
                ('slide_efficiency', models.FloatField(default=0)),
                ('text_economy', models.FloatField(default=0)),
                ('visual_communication', models.FloatField(default=0)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('sequence',
                 models.ForeignKey(blank=True, help_text='Optional sequence this session belongs to', null=True,
                                   on_delete=django.db.models.deletion.SET_NULL, related_name='sessions',
                                   to='practice_sessions.practicesequence')),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions',
                                   to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time',
                 models.FloatField(blank=True, help_text='Start time of the chunk in the session (in seconds)',
                                   null=True)),
                ('end_time',
                 models.FloatField(blank=True, help_text='End time of the chunk in the session (in seconds)',
                                   null=True)),
                ('video_file',
                 models.CharField(blank=True, help_text='Video file for this chunk', max_length=255, null=True)),
                ('chunk_number',
                 models.IntegerField(blank=True, help_text='Order of the chunk in the session', null=True)),
                ('transcript', models.TextField(blank=True, help_text='Transcript of this chunk', null=True)),
                ('audio_path',
                 models.CharField(blank=True, help_text='Path to the audio file for this chunk', max_length=255,
                                  null=True)),
                ('created_at',
                 models.DateTimeField(default=django.utils.timezone.now, help_text='When this chunk was created')),
                ('updated_at',
                 models.DateTimeField(default=django.utils.timezone.now, help_text='When this chunk was last updated')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks',
                                              to='practice_sessions.practicesession')),
            ],
            options={
                'ordering': ['chunk_number', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChunkSentimentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_number', models.IntegerField(default=0, help_text='Order of the chunk in the session')),
                ('audience_emotion',
                 models.CharField(blank=True, help_text='Audience Emotion', max_length=50, null=True)),
                ('conviction', models.PositiveIntegerField(default=0, help_text='Convictions',
                                                           validators=[django.core.validators.MinValueValidator(0),
                                                                       django.core.validators.MaxValueValidator(100)])),
                ('clarity', models.PositiveIntegerField(default=0, help_text='Clarity',
                                                        validators=[django.core.validators.MinValueValidator(0),
                                                                    django.core.validators.MaxValueValidator(100)])),
                ('impact', models.PositiveIntegerField(default=0, help_text='impact',
                                                       validators=[django.core.validators.MinValueValidator(0),
                                                                   django.core.validators.MaxValueValidator(100)])),
                ('brevity', models.PositiveIntegerField(default=0, help_text='Brevity',
                                                        validators=[django.core.validators.MinValueValidator(0),
                                                                    django.core.validators.MaxValueValidator(100)])),
                ('transformative_potential',
                 models.PositiveIntegerField(default=0, help_text='transformative potential',
                                             validators=[django.core.validators.MinValueValidator(0),
                                                         django.core.validators.MaxValueValidator(100)])),
                ('general_feedback_summary', models.TextField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume', null=True)),
                ('pitch_variability', models.FloatField(blank=True, help_text='Pitch variability', null=True)),
                ('pace', models.FloatField(blank=True, help_text='Pace', null=True)),
                ('chunk_transcript', models.TextField(blank=True, help_text='Transcript', null=True)),
                ('trigger_response', models.IntegerField(default=0, help_text='Number of trigger responses detected')),
                ('filler_words', models.IntegerField(default=0, help_text='Number of filler words used')),
                ('grammar', models.IntegerField(default=0, help_text='Grammar score or number of errors')),
                ('posture', models.IntegerField(default=0, help_text='Posture score',
                                                validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(100)])),
                ('motion', models.IntegerField(default=0, help_text='Motion score',
                                               validators=[django.core.validators.MinValueValidator(0),
                                                           django.core.validators.MaxValueValidator(100)])),
                ('gestures', models.BooleanField(default=False, help_text='Presence of positive gestures')),
                ('pauses', models.IntegerField(default=0, help_text='Pause score for this chunk (expected over 100)')),
                ('chunk',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sentiment_analysis',
                                      to='practice_sessions.sessionchunk')),
            ],
        ),
    ]
